#!/bin/bash
function producePCAPs(){
pcap="$1"
ip="$2"
mac="$3"
host="$4"
iph="$5"
mach="$6"
# Phase 1: Create .pcap _to and _from
tshark -r "$pcap".pcap -Y "ip.src==$ip" -F pcap -w "$pcap"_from.pcap
tshark -r "$pcap".pcap -Y "ip.dst==$ip" -F pcap -w "$pcap"_to.pcap
# Phase 2: Rewrite IP/MAC
tcprewrite -S $ip/32:$iph/32 --enet-smac=$mach,$mac -i "$pcap"_from.pcap -o "$pcap"_from_$host.pcap --skipbroadcast
tcprewrite -D $ip/32:$iph/32 --enet-dmac=$mach,$mac -i "$pcap"_to.pcap -o "$pcap"_to_$host.pcap --skipbroadcast
rm -rf "$pcap"_from.pcap "$pcap"_to.pcap
}

function mergePCAPs(){
pcaps=`ls *_to_*.pcap`
if [ -z "$pcaps" ]
then
    echo  "Error! No .pcap file found."
    exit 1
else
    mergecap *_to_*.pcap -w "$pcap"_toHosts.pcap
    rm -rf *_to_*.pcap
    exit 0
fi
}

function checkBinaries(){
if [ -z `which tshark` ]
then
    echo "tshark does not appear to be installed on this system."
    echo "Please install it with: sudo apt-get install tshark"
    exit 1
fi
if [ -z `which tcprewrite` ]
then
    echo "tcprewrite does not appear to be installed on this system."
    echo "Please install it with: sudo apt-get install tcpreplay"
    exit 1
fi
if [ -z `which mergecap` ]
then
    echo "mergecap does not appear to be installed on this system."
    echo "Please install it with: sudo apt-get install wireshark"
    exit 1
fi
}

function help(){
cat << EOFhelp
Usage $0 -p <.pcap> -i <source IP> -m <source MAC> -f <host(s) file>

<.pcap>: the .pcap file

<source IP>: the IP of the desired host from the .pcap

<source MAC>: the MAC of the desired host from the .pcap

<host(s) file>: a file with the output host in this format:
HOSTNAME HOST_IP HOST_MAC

Example:
	$0 -f hosts.txt -p test.pcap -i 172.16.11.12 -m f8:1e:df:e5:84:3a
With host.txt:
	H1 10.0.0.1 04:08:15:16:23:42
	H2 172.19.3.15 00:01:46:56:62:96
	H3 192.168.3.15 00:09:53:59:84:87

EOFhelp
}
function test(){
	# This will produce:
	## A pcap file to be played by the H1 host
	## A pcap file to be played by the H2 host
	## A pcap file to be played by the H3 host
	## A pcap file to be played by The Internet (or gateway) host
	pcap="test"
	ip="172.16.11.12"
	mac="f8:1e:df:e5:84:3a"
	if [ -f "./$1.pcap" ]
	then
		echo "could not find $pcap.pcap"
		exit 1
	fi
	producePCAPs $pcap $ip $mac H1 82.224.212.91 04:08:15:16:23:42
	producePCAPs $pcap $ip $mac H2 172.19.3.15 00:01:46:56:62:96
	producePCAPs $pcap $ip $mac H3 192.168.3.15 00:09:53:59:84:87
	mergePCAPs
}


while :
    do
       case $1 in
           -h | --help | -\?)
               help
               exit 0
               ;;
            -f | --file)
            # Option
               file=$2
               shift 2
               ;;
            -i | --ip)
            # Option
               ip=$2
               shift 2
               ;;
            -m | --mac)
            # Option
               mac=$2
               shift 2
               ;;
            -p | --pcap)
            # Option
               pcap=$2
               shift 2
               ;;
            -t | --test)
            # Flag
               test
			   exit 0
               ;;
           --) # End of all options
               shift
               break
               ;;
           -*)
               warn "Unknown option (ignored): $1" >&2
               shift
               ;;
           *)  # no more options. Stop while loop
               break
               ;;
       esac
   done

if [ -z $file ]
then
	echo "You must provide a file with host(s) info."
	exit 1
fi
if [ -z $ip ]
then
	echo "You must provide an IP address from the .pcap file."
	exit 1
fi
if [ -z $mac ]
then
	echo "You must provide a mac address from the .pcap file."
	exit 1
fi
if [ -z $pcap ]
then
	echo "You must provide a .pcap file."
	exit 1
fi

checkBinaries

pcap="${pcap%%.*}"
while read host iph mach
do
	if [ ! -z $host ]
	then
		echo "Producing pcap from host $host ($iph $mach) with $pcap.pcap"
		producePCAPs $pcap $ip $mac $host $iph $mach
	fi
done < $file
echo "Merging pcaps"
mergePCAPs

